apply plugin: 'com.android.library'
// add plugin (bintray)

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            ndkBuild {
                def gstRoot

                if (project.hasProperty('gstAndroidRoot'))
                    gstRoot = project.gstAndroidRoot
                else
                    gstRoot = System.env.GSTREAMER_ROOT_ANDROID

                if (gstRoot == null)
                    throw new GradleException('GSTREAMER_ROOT_ANDROID must be set, or "gstAndroidRoot" must be defined in your gradle.properties in the top level directory of the unpacked universal GStreamer Android binaries')

                def nnsRoot

                if (project.hasProperty('nnstreamerRoot'))
                    nnsRoot = project.nnstreamerRoot
                else
                    nnsRoot = System.env.NNSTREAMER_ROOT

                if (nnsRoot == null)
                    throw new GradleException('NNSTREAMER_ROOT must be set, or "nnstreamerRoot" must be defined in your gradle.properties')

                arguments "NDK_APPLICATION_MK=src/main/jni/Application.mk",
                          "GSTREAMER_JAVA_SRC_DIR=src/main/java",
                          "GSTREAMER_ROOT_ANDROID=$gstRoot",
                          "GSTREAMER_ASSETS_DIR=src/main/assets",
                          "NNSTREAMER_ROOT=$nnsRoot"

                targets "nnstreamer-native"

                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
    productFlavors {
    }
    sourceSets {
        main {
            if (project.hasProperty('SNPE_EXT_LIBRARY_PATH')) {
                jniLibs.srcDirs += project.properties['SNPE_EXT_LIBRARY_PATH']
                println 'Set jniLibs.srcDirs includes libraries for SNPE'
            }
        }
    }
    packagingOptions {
        // To do not show build warning messages
        doNotStrip "*/arm64-v8a/*_skel.so"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
