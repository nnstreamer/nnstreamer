syntax = "proto3";

import "google/protobuf/empty.proto";

package nnstreamer.protobuf;

message Tensor {
  string name = 1;
  enum Tensor_type {
    NNS_INT32 = 0;
    NNS_UINT32 = 1;
    NNS_INT16 = 2;
    NNS_UINT16 = 3;
    NNS_INT8 = 4;
    NNS_UINT8 = 5;
    NNS_FLOAT64 = 6;
    NNS_FLOAT32 = 7;
    NNS_INT64 = 8;
    NNS_UINT64 = 9;
  }
  Tensor_type type = 2;
  repeated uint32 dimension = 3;
  bytes data = 4;
}

message Tensors {
  uint32 num_tensor = 1;
  // frame_rate := rate_n / rate_d and it may be 0
  message frame_rate {
    int32 rate_n = 1;
    int32 rate_d = 2;
  }
  frame_rate fr = 2;
  repeated Tensor tensor = 3;
  enum Tensor_format {
    NNS_TENSOR_FORAMT_STATIC = 0;
    NNS_TENSOR_FORMAT_FLEXIBLE = 1;
    NNS_TENSOR_FORMAT_SPARSE = 2;
  }
  Tensor_format format = 4;
}

// clients should initiate RPC calls first but can keep the streaming
service TensorService {
  // client-to-server streaming
  rpc SendTensors (stream Tensors) returns (google.protobuf.Empty) {}
  // server-to-client streaming
  rpc RecvTensors (google.protobuf.Empty) returns (stream Tensors) {}
}
