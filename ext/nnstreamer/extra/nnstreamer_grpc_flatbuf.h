/* SPDX-License-Identifier: LGPL-2.1-only */
/**
 * GStreamer / NNStreamer gRPC/flatbuf support
 * Copyright (C) 2020 Dongju Chae <dongju.chae@samsung.com>
 */
/**
 * @file    nnstreamer_grpc_flatbuffer.h
 * @date    26 Nov 2020
 * @brief   nnstreamer gRPC/Flatbuf support
 * @see     https://github.com/nnstreamer/nnstreamer
 * @author  Dongju Chae <dongju.chae@samsung.com>
 * @bug     No known bugs except for NYI items
 */

#ifndef __NNS_GRPC_FLATBUF_H__
#define __NNS_GRPC_FLATBUF_H__

#include "nnstreamer_grpc_common.h"
#include "nnstreamer.grpc.fb.h" /* Generated by `flatc` */

namespace grpc {

/**
 * @brief NNStreamer gRPC flatbuf service impl.
 */
class ServiceImplFlatbuf final
  : public NNStreamerRPC,
    public nnstreamer::flatbuf::TensorService::Service
{
  public:
    ServiceImplFlatbuf (const grpc_config * config);

    Status SendTensors (ServerContext *context,
        ServerReader<flatbuffers::grpc::Message<nnstreamer::flatbuf::Tensors>> *reader,
        flatbuffers::grpc::Message<nnstreamer::flatbuf::Empty> *replay) override;

    Status RecvTensors (ServerContext *context,
        const flatbuffers::grpc::Message<nnstreamer::flatbuf::Empty> *request,
        ServerWriter<flatbuffers::grpc::Message<nnstreamer::flatbuf::Tensors>> *writer) override;

  private:
    gboolean start_server (std::string address) override;
    gboolean start_client (std::string address) override;

    template <typename T>
    grpc::Status _write_tensors (T writer);

    template <typename T>
    grpc::Status _read_tensors (T reader);

    void _get_tensors_from_buffer (
        GstBuffer *buffer,
        flatbuffers::grpc::Message<nnstreamer::flatbuf::Tensors> &tensors);
    void _get_buffer_from_tensors (
        flatbuffers::grpc::Message<nnstreamer::flatbuf::Tensors> &tensors,
        GstBuffer **buffer);

    void _client_thread ();

    std::unique_ptr<nnstreamer::flatbuf::TensorService::Stub> client_stub_;
};

}; // namespace grpc

#endif /* __NNS_GRPC_FLATBUF_H__ */
