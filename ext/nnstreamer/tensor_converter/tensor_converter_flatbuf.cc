/**
 * GStreamer / NNStreamer tensor_converter subplugin, "Flatbuffer"
 * Copyright (C) 2020 Gichan Jang <gichan2.jang@samsung.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 */
/**
 * @file        tensor_converter_flatbuf.cc
 * @date        30 Mar 2020
 * @brief       NNStreamer tensor-converter subplugin, "flatbuffer",
 *              which converts flatbuufers byte stream to tensors.
 * @see         https://github.com/nnsuite/nnstreamer
 * @author      Gichan Jang <gichan2.jang@samsung.com>
 * @bug         No known bugs except for NYI items
 *
 */

#include <iostream>
#include <typeinfo>
#include <glib.h>
#include <gst/gstinfo.h>
#include <nnstreamer_plugin_api.h>
#include "nnstreamer_plugin_api_converter.h"
#include "nnstreamer_generated.h" // Generated by `flatc`.

using namespace NNStreamer;

void init_fb (void) __attribute__ ((constructor));
void fini_fb (void) __attribute__ ((destructor));

#define DECODER_FB_BIN_CAPS_STR "application/octet-stream"

/** @brief tensor converter plugin's NNStreamerExternalConverter callback */
static int
fb_init (void **pdata)
{
  *pdata = NULL;
  return TRUE;
}

/** @brief tensor converter plugin's NNStreamerExternalConverter callback */
static void
fb_exit (void **pdata)
{
  return;
}

/** @brief tensor converter plugin's NNStreamerExternalConverter callback */
static int
fb_setOption (void **pdata, int opNum, const char *param)
{
  return TRUE;
}

/** @brief tensor converter plugin's NNStreamerExternalConverter callback */
static GstCaps *
fb_getOutCaps (void **pdata, const GstTensorsConfig * config)
{
  return gst_caps_from_string (DECODER_FB_BIN_CAPS_STR);
}

/** @brief tensor converter plugin's NNStreamerExternalConverter callback */
static GstFlowReturn
fb_convert (void **pdata, const GstTensorsConfig * config,
    const GstTensorMemory * input, GstBuffer * outbuf)
{
  return GST_FLOW_OK;
}

static gchar converter_subplugin_flatbuf[] = "flatbuf";

/** @brief flatbuffer tensordec-plugin NNStreamerExternalConverter instance */
static NNStreamerExternalConverter flatBuf = {
  .modename = converter_subplugin_flatbuf,
  .init = fb_init,
  .exit = fb_exit,
  .setOption = fb_setOption,
  .getOutCaps = fb_getOutCaps,
  .convert = fb_convert
};

/** @brief Initialize this object for tensordec-plugin */
void
init_fb (void)
{
  nnstreamer_decoder_probe (&flatBuf);
}

/** @brief Destruct this object for tensordec-plugin */
void
fini_fb (void)
{
  nnstreamer_decoder_exit (flatBuf.modename);
}