name: Test on RISCV64 Ubuntu 20.04

on:
  pull_request:
    branches: [ main ]

jobs:
  build_job:
    runs-on: ubuntu-20.04
    name: Build on Ubuntu 20.04 RISC-V 64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if rebuild required
        uses: ./.github/actions/check-rebuild
        with:
          mode: rebuild
      - uses: nnstreamer/run-on-arch-action@master
        name: Run commands
        if: env.rebuild == '1'
        id: Build
        with:
          arch: riscv64
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          run: |
            apt-get -qy update
            apt-get -qy install meson ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libglib2.0-dev libjson-glib-dev gstreamer1.0-tools gstreamer1.0-plugins-base gstreamer1.0-plugins-good libgtest-dev libpng-dev libopencv-dev python3 python3-dev python3-numpy pkg-config gcc g++ liblua5.1-dev bash wget libpng-dev
            bash .github/workflows/get_ssat.sh
            meson build -Denable-tizen=false -Denable-test=true
            ninja -C build
            export NNSTREAMER_SOURCE_ROOT_PATH=$(pwd)
            export NNSTREAMER_BUILD_ROOT_PATH=$(pwd)/build
            export GST_PLUGIN_PATH=${NNSTREAMER_BUILD_ROOT_PATH}/gst:${NNSTREAMER_BUILD_ROOT_PATH}/ext
            export NNSTREAMER_CONF=${NNSTREAMER_BUILD_ROOT_PATH}/nnstreamer-test.ini
            export NNSTREAMER_FILTERS=${NNSTREAMER_BUILD_ROOT_PATH}/ext/nnstreamer/tensor_filter
            export NNSTREAMER_DECODERS=${NNSTREAMER_BUILD_ROOT_PATH}/ext/nnstreamer/tensor_decoder
            export NNSTREAMER_CONVERTERS=${NNSTREAMER_BUILD_ROOT_PATH}/ext/nnstreamer/tensor_converter
            export NNSTREAMER_TRAINERS=${NNSTREAMER_BUILD_ROOT_PATH}/ext/nnstreamer/tensor_trainer
            bash ./packaging/run_unittests_binaries.sh -k unittest_filter_python3 ./tests
            cd tests/nnstreamer_converter && ssat && cd ../..
